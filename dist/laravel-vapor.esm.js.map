{"version":3,"file":"laravel-vapor.esm.js","sources":["../src/index.js"],"sourcesContent":["import axios from 'axios'\n\nlet assetUrlResolver = () => {\n    try {\n        return process.env.MIX_VAPOR_ASSET_URL\n            ? process.env.MIX_VAPOR_ASSET_URL\n            : '';\n    } catch (e) {\n        console.error('Unable to automatically resolve the asset URL. Use Vapor.withBaseAssetUrl() to specify it manually.')\n\n        throw e\n    }\n}\n\nclass Vapor\n{\n    /**\n     * Generate the S3 URL to an application asset.\n     */\n    asset(path) {\n        return assetUrlResolver() + '/' + path;\n    }\n\n    /**\n     * Set the base URL for assets.\n     */\n    withBaseAssetUrl(url) {\n        assetUrlResolver = () => url ? url : ''\n    }\n\n    /**\n     * Store a file in S3 and return its UUID, key, and other information.\n     */\n    async store(file, options = {}) {\n        const httpClient = options.httpClient ? options.httpClient : axios;\n\n        const response = await httpClient.post(options.signedStorageUrl ? options.signedStorageUrl : '/vapor/signed-storage-url', {\n            'bucket': options.bucket || '',\n            'content_type': options.contentType || file.type,\n            'expires': options.expires || '',\n            'visibility': options.visibility || '',\n            ...options.data\n        }, {\n            baseURL: options.baseURL || null,\n            headers: options.headers || {},\n            ...options.options\n        });\n\n        let headers = response.data.headers;\n\n        if ('Host' in headers) {\n            delete headers.Host;\n        }\n\n        if (typeof options.progress === 'undefined') {\n            options.progress = () => {};\n        }\n\n        const cancelToken = options.cancelToken || ''\n\n        await httpClient.put(response.data.url, file, {\n            cancelToken: cancelToken,\n            headers: headers,\n            onUploadProgress: (progressEvent) => {\n                options.progress(progressEvent.loaded / progressEvent.total);\n            }\n        })\n\n        response.data.extension = file.name.split('.').pop()\n\n        return response.data;\n    }\n}\n\nexport default new Vapor();\n"],"names":["assetUrlResolver","process","env","MIX_VAPOR_ASSET_URL","e","console","error","index","Vapor","_proto","prototype","asset","path","withBaseAssetUrl","url","store","file","options","httpClient","axios","Promise","resolve","post","signedStorageUrl","_extends","bucket","content_type","contentType","type","expires","visibility","data","baseURL","headers","then","response","Host","progress","put","cancelToken","onUploadProgress","progressEvent","loaded","total","extension","name","split","pop","reject"],"mappings":"qOAEA,IAAIA,EAAmB,WACnB,IACI,OAAOC,QAAQC,IAAIC,oBACbF,QAAQC,IAAIC,oBACZ,EAKV,CAJE,MAAOC,GAGL,MAFAC,QAAQC,MAAM,uGAERF,CACV,CACJ,EA8DAG,EAAe,IA5DJ,WAAA,SAAAC,IAAAC,CAAAA,IAAAA,EAAAD,EAAAE,UAyDNF,OAzDMC,EAKPE,MAAA,SAAMC,GACF,OAAOZ,IAAqB,IAAMY,CACtC,EAACH,EAKDI,iBAAA,SAAiBC,GACbd,EAAmB,WAAM,OAAAc,GAAY,EAAE,CAC3C,EAACL,EAKKM,MAAK,SAACC,EAAMC,QAAAA,IAAAA,IAAAA,EAAU,CAAA,OACxB,IAAMC,EAAaD,EAAQC,WAAaD,EAAQC,WAAaC,EAAM,OAAAC,QAAAC,QAE5CH,EAAWI,KAAKL,EAAQM,iBAAmBN,EAAQM,iBAAmB,4BAA2BC,EACpH,CAAAC,OAAUR,EAAQQ,QAAU,GAC5BC,aAAgBT,EAAQU,aAAeX,EAAKY,KAC5CC,QAAWZ,EAAQY,SAAW,GAC9BC,WAAcb,EAAQa,YAAc,IACjCb,EAAQc,MAAIP,EAAA,CAEfQ,QAASf,EAAQe,SAAW,KAC5BC,QAAShB,EAAQgB,SAAW,CAAA,GACzBhB,EAAQA,WACbiB,KAVIC,SAAAA,GAYN,IAAIF,EAAUE,EAASJ,KAAKE,QAUiB,MARzC,SAAUA,UACHA,EAAQG,UAGa,IAArBnB,EAAQoB,WACfpB,EAAQoB,SAAW,WACvB,GAE6CjB,QAAAC,QAEvCH,EAAWoB,IAAIH,EAASJ,KAAKjB,IAAKE,EAAM,CAC1CuB,YAHgBtB,EAAQsB,aAAe,GAIvCN,QAASA,EACTO,iBAAkB,SAACC,GACfxB,EAAQoB,SAASI,EAAcC,OAASD,EAAcE,MAC1D,KACFT,KAEFC,WAEA,OAFAA,EAASJ,KAAKa,UAAY5B,EAAK6B,KAAKC,MAAM,KAAKC,MAExCZ,EAASJ,IAAK,IACxBvB,CAAA,MAAAJ,GAAAgB,OAAAA,QAAA4B,OAAA5C,EAAAI,CAAAA,EAAAA,CAAA,CAzDM"}