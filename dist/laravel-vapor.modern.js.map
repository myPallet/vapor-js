{"version":3,"file":"laravel-vapor.modern.js","sources":["../src/index.js"],"sourcesContent":["import axios from 'axios'\n\nlet assetUrlResolver = () => {\n    try {\n        return process.env.MIX_VAPOR_ASSET_URL\n            ? process.env.MIX_VAPOR_ASSET_URL\n            : '';\n    } catch (e) {\n        console.error('Unable to automatically resolve the asset URL. Use Vapor.withBaseAssetUrl() to specify it manually.')\n\n        throw e\n    }\n}\n\nclass Vapor\n{\n    /**\n     * Generate the S3 URL to an application asset.\n     */\n    asset(path) {\n        return assetUrlResolver() + '/' + path;\n    }\n\n    /**\n     * Set the base URL for assets.\n     */\n    withBaseAssetUrl(url) {\n        assetUrlResolver = () => url ? url : ''\n    }\n\n    /**\n     * Store a file in S3 and return its UUID, key, and other information.\n     */\n    async store(file, options = {}) {\n        const httpClient = options.httpClient ? options.httpClient : axios;\n\n        const response = await httpClient.post(options.signedStorageUrl ? options.signedStorageUrl : '/vapor/signed-storage-url', {\n            'bucket': options.bucket || '',\n            'content_type': options.contentType || file.type,\n            'expires': options.expires || '',\n            'visibility': options.visibility || '',\n            ...options.data\n        }, {\n            baseURL: options.baseURL || null,\n            headers: options.headers || {},\n            ...options.options\n        });\n\n        let headers = response.data.headers;\n\n        if ('Host' in headers) {\n            delete headers.Host;\n        }\n\n        if (typeof options.progress === 'undefined') {\n            options.progress = () => {};\n        }\n\n        const cancelToken = options.cancelToken || ''\n\n        await httpClient.put(response.data.url, file, {\n            cancelToken: cancelToken,\n            headers: headers,\n            onUploadProgress: (progressEvent) => {\n                options.progress(progressEvent.loaded / progressEvent.total);\n            }\n        })\n\n        response.data.extension = file.name.split('.').pop()\n\n        return response.data;\n    }\n}\n\nexport default new Vapor();\n"],"names":["assetUrlResolver","process","env","MIX_VAPOR_ASSET_URL","e","console","error","index","asset","path","withBaseAssetUrl","url","async","file","options","httpClient","axios","response","post","signedStorageUrl","_extends","bucket","content_type","contentType","type","expires","visibility","data","baseURL","headers","Host","progress","cancelToken","put","onUploadProgress","progressEvent","loaded","total","extension","name","split","pop"],"mappings":"qOAEA,IAAIA,EAAmBA,KACnB,IACI,OAAOC,QAAQC,IAAIC,oBACbF,QAAQC,IAAIC,oBACZ,EAKV,CAJE,MAAOC,GAGL,MAFAC,QAAQC,MAAM,uGAERF,CACV,GA+DJ,IAAAG,EAAe,IA5Df,MAKIC,MAAMC,GACF,OAAOT,IAAqB,IAAMS,CACtC,CAKAC,iBAAiBC,GACbX,EAAmBA,IAAMW,GAAY,EACzC,CAKAC,YAAYC,EAAMC,EAAU,CAAA,GACxB,MAAMC,EAAaD,EAAQC,WAAaD,EAAQC,WAAaC,EAEvDC,QAAiBF,EAAWG,KAAKJ,EAAQK,iBAAmBL,EAAQK,iBAAmB,4BAA2BC,EACpH,CAAAC,OAAUP,EAAQO,QAAU,GAC5BC,aAAgBR,EAAQS,aAAeV,EAAKW,KAC5CC,QAAWX,EAAQW,SAAW,GAC9BC,WAAcZ,EAAQY,YAAc,IACjCZ,EAAQa,MAAIP,EAEfQ,CAAAA,QAASd,EAAQc,SAAW,KAC5BC,QAASf,EAAQe,SAAW,CAAA,GACzBf,EAAQA,UAGf,IAAIe,EAAUZ,EAASU,KAAKE,QAExB,SAAUA,UACHA,EAAQC,UAGa,IAArBhB,EAAQiB,WACfjB,EAAQiB,SAAW,QAGvB,MAAMC,EAAclB,EAAQkB,aAAe,GAY3C,aAVMjB,EAAWkB,IAAIhB,EAASU,KAAKhB,IAAKE,EAAM,CAC1CmB,YAAaA,EACbH,QAASA,EACTK,iBAAmBC,IACfrB,EAAQiB,SAASI,EAAcC,OAASD,EAAcE,MAC1D,IAGJpB,EAASU,KAAKW,UAAYzB,EAAK0B,KAAKC,MAAM,KAAKC,MAExCxB,EAASU,IACpB"}